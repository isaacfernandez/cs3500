For this project, we were given the views and model interfaces of kernanr and mrascati. Our goal
was to adapt our model and controller to work with their view.

It was not very difficult to adapt our model to theirs. We initially encountered a problem where
the MusicModel interface they sent us was not up to date, and there were method calls in the view
to MusicModels to methods that didn't actually exist. They sent us the updated file, which fixed
this. We were able to create adapters for both their MusicModel from our MusicRepresentation and
Score and their Note to our Tone/ToneImp. We renamed our enum Note to NoteEnum, so our NoteEnum did
not have the same name as their note. We did encounter a slight issue in adapting our Tones, as
their Notes had methods that returned their start and end beats, but our Tones started and ended
based on where they were in the piece (so our ToneImpl did not record that anywhere), but were able
to use a field in our adapter to get around this.

We encountered some problems while adapting our code for their view. In their views (specifically
the files ConcreteGuiViewPanel and ConsoleView), they leaked implementation details in several
places by creating "NoteImpl"s, their implementation of note, and using a static method on Piece,
their implementation of music model, called "sortNotesByPitch(Collection<Note> notes)". We emailed
several times (December 5, December 7, and December 9) asking them to change this (as we were
unable to compile their code due to it), but we never received any changed files. As a result, we
were unable to avoid making changes to their code. We have uploaded a change log of the changes we
needed to make, both to their code and to ours to document this (as well as leaving comments in the
code).

Another problem we encountered was the absence of a view that combines the GUI and MIDI views. This
was not sent to us initially. We requested it and got a message that said they do not have that
view created. This made working with that particular view impossible, so we worked instead on the
assumption that they have a view that would work as such. They also did not have any method
declarations in their interface that was specifically for GUI views (GuiViewInterface), and did not
actually implement that interface anywhere (instead using ViewInterface for all of their views).

A third problem we encountered was the absence of certain methods in their GUI code. The methods
playPiece, playBeat, and playFromBeat on GuiViewFrame were all void and empty. All of the other
GUI views also had playFromBeat empty. As there was no documentation in ViewInterface as to exactly
what each of those methods is supposed to do, and why they might be empty in certain classes. We 
thus worked off of the assumption that their views worked as expected, and filled in their empty,
void methods with system calls to show that our code did, indeed, run and call the appropriate
methods. Our code can play the MIDI view, and outputs strings that it confirm it is calling the
methods to build the GUI view.

Furthermore, MouseAndKeyHandler is created directly in the view. As this fails the requirements 
of the previous assignments and we needed a way to pass in my own controller, this was another place
where we /had/ to modify their code (failing an update to their codebase). We did this with minimal
intrusion by adding it as a parameter to their constructor and trickling it down to where they now
spawned the keyhandler, and there assigning our own while commenting out their own assignment.

Also, many of their files have non-stylistic indentation (4 v. 2). 

ðŸŽ­
